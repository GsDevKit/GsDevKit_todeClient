#! /bin/bash
#=========================================================================
# Copyright (c) 2015 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#=========================================================================

echo "================="
echo "   GsDevKit script: $(basename $0) $*"
echo "              path: $0"
echo "================="

usage() {
  cat <<HELP
USAGE: $(basename $0) [-h] [-f] [-p <postfix>] 
                      [ [-s <session-description-name>] [-t <test-suite-name> [-r]] [-z <smalltalkCI-smalltalk.ston-path>] ]
                      <client-name>

Launch todeClient image.

OPTIONS
  -f
     Rebuild the todeClient image
  -h 
     display help
  -p <postfix>
     Launch the tode client image created with a matching postfix. If
     the tode client image does not exist, build it.
  -s <session-description-name>
     Assume that client was created with -z option specified, use <session-description-name> to 
     override the default session name specified in the original <smalltalkCI-smalltalk.ston-path> file.
  -z <smalltalkCI-smalltalk.ston-path>
     If -t option is specified, path to SmalltalkCI smalltalk.ston file. Sets the image-level default 
     session name from the <smalltalkCI-smalltalk.ston-path> file and specifies the set of tests to run.
  -t <test-suite-name>
     Run the smalltalkCI tests specified in the  <smalltalkCI-smalltalk.ston-path> file, using the 
     specified <test-suite-name>.
  -r
     If -t option specified, display results of test run on stdout.

EXAMPLES
  $(basename $0) -h
  $(basename $0) -f tode
  $(basename $0) tode
  $(basename $0) -p _0 tode # Launches the image named todeClient_0.image

HELP
}

set -e # exit on error
if [ "${GS_HOME}x" = "x" ] ; then
  echo "the GS_HOME environment variable needs to be defined"
  exit 1
fi
source ${GS_HOME}/bin/defGsDevKit.env
if [ "${GS_TODE_CLIENT}x" = "x" ] ; then
  echo "the GsDevKit_todeClient project has not been installed correctly or the"
  echo "GS_TODE_CLIENT environment variable has not been defined"
  exit 1
fi
source ${GS_HOME}/bin/private/winRunPharoFunctions

scriptDir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
echo "     Pharo STDOUT routed to: ${scriptDir}/logs/todeClient${postFix}.log"

postFix=""
force=""
sessionName=""
smalltalkCIPath=""
testSuiteName=""
showCIResults="false"
smalltalkCIArg=""
postFixArg=""
while getopts "fhp:s:z:t:r" OPT ; do
  case "$OPT" in
    f) force="true";;
    h) usage; exit 0 ;;
    p) postFix="${OPTARG}"; postFixArg=" -p  ${OPTARG} ";;
    s) sessionName="${OPTARG}";;
    t) testSuiteName="${OPTARG}";;
    r) showCIResults="true";;
    z) smalltalkCIPath="${OPTARG}"; smalltalkCIArg=" -s ${OPTARG} ";;
    *) usage; exit 1 ;;
  esac
done
shift $(($OPTIND - 1))

clientName=$1
imageName=${clientName}${postFix}

if [ "$force" = "true" ] ; then
  $GS_TODE_CLIENT/bin/createPharoTodeClient -f $postFixArg $smalltalkCIArg $clientName
fi

if [ ! -e $scriptDir/${imageName}.image ] ; then
  if [ ! -e $scriptDir/todeClient${postFix}.image ] ; then
    echo "The requested client image: $scriptDir/${imageName}.image does not exist"
    created="false"
    while [ "$created" = "false" ] ; do
      read -p "Do you wish to create ${imageName}? [y/n]" yn
      case $yn in
        [Yy]* ) $GS_TODE_CLIENT/bin/createPharoTodeClient -f $postFixArg $smalltalkCIArg $clientName; created="true";;
        [Nn]* ) exit 1;;
        * ) echo "Please answer yes or no.";;
      esac
    done
  else
    # pre-existing old-style image
    imageName=todeClient${postFix}
  fi
fi

# Detect operating system
PLATFORM="`uname -sm | tr ' ' '-'`"
# Macs with Core i7 use the same software as older Macs
[ $PLATFORM = "Darwin-x86_64" ] && PLATFORM="Darwin-i386"

case "$PLATFORM" in
  Darwin-i386) 
    pharoCmd="$scriptDir/pharo-ui "
    ciPharoCmd="$scriptDir/pharo "
    ;; 
  Linux-x86_64) 
    pharoCmd="$scriptDir/pharo-ui --textenc UTF-8"
    ciPharoCmd="$scriptDir/pharo "
    ;;
  MSYS_NT*|MINGW32_NT*) 
    pharoCmd="win_run_pharo $scriptDir "
    ciPharoCmd="win_run_pharo $scriptDir --headless "
    ;;
  *)
    echo "unsupported platform: $PLATFORM"
    exit 1
    ;;
esac

unset GEMSTONE_NRS_ALL

if [ "${testSuiteName}x" != "x" ] ; then 
  if [ "${smalltalkCIPath}x" = "x" ] ; then
    echo "Required -z option not specified"; usage; exit 1
  fi
  $ciPharoCmd $scriptDir/${imageName}.image eval "
      | ci sessionName |
      ci := SmalltalkCI platformClass basicNew
        initialize;
	suiteName: '$clientName';
	readSTONSpec: '${smalltalkCIPath}'.
      '${sessionName}' isEmpty
        ifTrue: [ 
          (ci compatibleConfigurationsFor: #gemstoneClient) do: [:configSpec |
            configSpec sessionName ifNotNil: [:sessName |  sessionName := sessName ]]]
	ifFalse: [ sessionName := '${sessionName}' ].
      SCIGemStoneServerConfigSpec defaultSessionName: sessionName.
      ci testCI
  "
  if [ "${SMALLTALK_CI_BUILD:-}x" != "x" ] ; then
    cp -f $scriptDir/*.xml ${SMALLTALK_CI_BUILD}
  fi
  if [ "${showCIResults}" = "true" ] ; then
    python "$GS_HOME/shared/repos/smalltalkCI/lib/junit_xml_prettfier.py" "$scriptDir"
  fi
else
  if [ "${sessionName}x" != "x" ]; then
    $pharoCmd $scriptDir/${imageName}.image eval "
    SCIGemStoneServerConfigSpec defaultSessionName: '${sessionName}'.
    " &> $scriptDir/logs/${imageName}.log &
  else
    $pharoCmd $scriptDir/${imageName}.image &> $scriptDir/logs/${imageName}.log &
  fi
fi

echo "...finished $(basename $0)"
