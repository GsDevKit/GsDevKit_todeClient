#! /bin/bash
#=========================================================================
# Copyright (c) 2015,2016 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#
#   MIT license: https://github.com/GsDevKit/GsDevKit_todeClient/blob/master/license.txt
#=========================================================================

theArgs="$*"
source ${GS_HOME}/bin/private/shFeedback
start_banner

usage() {
  cat <<HELP
USAGE: $(basename $0) [-h] [-D] [-f] [-c|-l] [-p <postfix] [-t 32 | 64 ] [-v Pharo3.0 | Pharo4.0 | Pharo5.0 ]
                      [ [-s <session-description-name>] [-y <project-path>] [-z <smalltalkCI-smalltalk.ston-path>] ]
                      <client-name>

Create a client of the given name. Used for running pharo-based scripts
and for running the tODE client UI.

If the client image already exists, the installation is skipped
unless the -f option is specified.

OPTIONS
  -h 
     display help
  -f
     Force client installation, whether or not the image
     already exists.
  -p <postfix>
     Append <postfix> to end of image name. Useful for creating
     multiple client images.
  -s <session-description-name>
     If -z option is specified, <session-description-name> is used to override the default session name
     specified in the <smalltalkCI-smalltalk.ston-path> file.
	-t 32 | 64
		 If the -t option is not specified the gci libraries are assumed to be 32 bit. 64 indicates that 
		 64 bit gci libraries are needed
  -y <project-path>
     If the -z option is specified, <project-path> specifies the project directory to be used with the 
     <smalltalkCI-smalltalk.ston-path> file.
  -z <smalltalkCI-smalltalk.ston-path>
     Path to SmalltalkCI smalltalk.ston file which contains the load and optional
     tests instructions for creating the image
  -c|-l
     Build a non-tODE client image. -l option indicates that Metacello repositories should be locked.
  -v Pharo3.0 | Pharo4.0
     Choose the version of Pharo to use for the client. Default is Pharo3.0.
 -D
     Create client using headful invocation for debugging creation errors.

EXAMPLES
  $(basename $0) -h
  $(basename $0) todeDev
  $(basename $0) -p _0 todeDev
  $(basename $0) -f todeDev
  $(basename $0) -v Pharo3.0 todeDev
  $(basename $0) -t 64 -v Pharo7.0 todeDev

  $(basename $0) -c -v Pharo5.0 -z \$GS_HOME/shared/repos/GemStone-GCI/.smalltalk.ston
  $(basename $0) -c -v Pharo5.0 -s gs_329 -z \$GS_HOME/shared/repos/GemStone-GCI/.smalltalk.ston
  $(basename $0) -c -f -v Pharo5.0 -z \$GS_HOME/shared/repos/GemStone-GCI/.smalltalk.ston
  $(basename $0) -c -v Pharo5.0 -y \$GS_HOME/shared/repos/GemStone-GCI -z \$GS_HOME/sys/local/pharo/pharoClient.ston pharoClient
  $(basename $0) -c -v Pharo5.0 -s gs_329 -y \$GS_HOME/shared/repos/GemStone-GCI -z \$GS_HOME/sys/local/pharo/pharoClient.ston pharoClient
  $(basename $0) -c -f -v Pharo5.0 -y \$GS_HOME/shared/repos/GemStone-GCI -z \$GS_HOME/sys/local/pharo/pharoClient.ston pharoClient
  $(basename $0) -c -v Pharo5.0 
  $(basename $0) -c -t 64 -v Pharo7.0 

  $(basename $0) -l -v Pharo5.0 -z \$GS_HOME/shared/repos/Tugrik/.smalltalk.ston
HELP
}

source ${GS_HOME}/bin/defGsDevKit.env
if [ "${GS_TODE_CLIENT}x" = "x" ] ; then
  exit_1_banner "the GsDevKit_todeClient project has not been installed correctly or the GS_TODE_CLIENT environment variable has not been defined"
fi
source ${GS_HOME}/bin/private/winRunPharoFunctions

postFix=""
force=""
version="Pharo3.0"
clientImage="false"
smalltalkCIPath=""
smalltalkCIProjectPath=""
debugMode="false"
sessionName=""
lockMetacelloRepositories=""
gciLibArchArg=""
while getopts ":fhp:z:cv:Ds:y:lt:" OPT ; do
  case "$OPT" in
    h) usage; exit 0;;
    f) force="true";;
    p) postFix="${OPTARG}";;
    c) clientImage="true";;
    l) clientImage="true"; lockMetacelloRepositories="lock Metacello Repositories";;
    z) smalltalkCIPath="${OPTARG}";;
    v) version="${OPTARG}";;
    s) sessionName="${OPTARG}";;
		t) gciLibArchArg="-t ${OPTARG} ";;
    y) smalltalkCIProjectPath="${OPTARG}";;
    D) debugMode="true";;
    ?) postFixArg=" -p ";;          # handle optional -p argument "
    *) usage; exit_1_banner "Uknown option";;
  esac
done
shift $(($OPTIND - 1))

if [ $# -lt 1 ]; then
  usage; exit_1_banner "Missing required positional parameter"
fi
clientName=$1
directoryPath=$GS_CLIENT_DEV_CLIENTS/$clientName

if [ ! -d "$directoryPath" ] ; then
  mkdir $directoryPath
  cp -r $GS_TODE_CLIENT/template/* $directoryPath/
fi

if [ ! -e "$directoryPath/Pharo.image" ] ; then
  $GS_HOME/bin/private/downloadSmalltalkClient -v $version -d $directoryPath
fi

message="create"
imageName=${clientName}${postFix}
if [ -e $directoryPath/todeClient${postFix}.image ] ; then
  # old-style tode client
  imageName="todeClient${postFix}"
else
  if [ -e $directoryPath/${imageName}.image ] ; then
    clientImage="true"
  fi
fi
if [ -e $directoryPath/${imageName}.image ] ; then
  if [ "${force}x" = "x" ] ; then
    exit_0_banner "client image already created, use -f to force update"
  else
    message="update"
  fi
else
  # target image does not exist, so force is a noop
  force="false"
fi

# Detect operating system
PLATFORM="`uname -sm | tr ' ' '-'`"

case "$PLATFORM" in
  MSYS_NT*|MINGW32_NT*|MINGW64_NT*)
    pharoCmd="win_run_pharo $directoryPath --headless"
    debugPharoCmd="$pharoCmd"
    todeLoadPath=$GS_SYS_DEFAULT/pharo/windows/todeLoad.st
    if [ -e $GS_SYS_LOCAL/pharo/windows/todeLoad.st ] ; then
      todeLoadPath=$GS_SYS_LOCAL/pharo/windows/todeLoad.st
    fi
    ;;
  *)
    pharoCmd="$directoryPath/pharo"
    debugPharoCmd="$directoryPath/pharo-ui"
    todeLoadPath=$GS_SYS_DEFAULT/pharo/todeLoad.st
    if [ -e $GS_SYS_LOCAL/pharo/todeLoad.st ] ; then
      todeLoadPath=$GS_SYS_LOCAL/pharo/todeLoad.st
    fi
    ;;
esac

createPharoCmd=$pharoCmd
if [ "$debugMode" = "true" ] ; then
  createPharoCmd=$debugPharoCmd
fi

if [ "${clientImage}" = "false" ] ; then
  echo "${message} ${imageName} image using $todeLoadPath"

  if [ "${force}" = "true" ] ; then
    $pharoCmd $directoryPath/${imageName}.image save todeClientTmp
  else
    $pharoCmd $directoryPath/Pharo.image save todeClientTmp
  fi

  $createPharoCmd $directoryPath/todeClientTmp.image st --quit --save $todeLoadPath

  $pharoCmd $directoryPath/todeClientTmp.image save $imageName

  echo""
  rm -f $directoryPath/todeClientTmp.*  $directoryPath/*.zip

  $GS_HOME/bin/private/scanProductsForInstallingGciLibs $gciLibArchArg $directoryPath
else

  if [ "${force}" = "true" ] ; then
    $pharoCmd $directoryPath/${imageName}.image save clientTmp
  else
    $pharoCmd $directoryPath/Pharo.image save clientTmp
  fi

  loadGsDevKitClient=""
  if [ -d "${GS_SHARED_REPO}/todeClient/GsDevKit-Structure.package" ] ; then
    loadGsDevKitClient="load"
  fi

  case "$version" in
    Pharo3.0|Pharo4.0|Pharo5.0)
      latestMetacello="true"
      ;;
    *)
      latestMetacello=""
      ;;
  esac
  if [ "${smalltalkCIPath}x" != "x" ] ; then
    echo "${message} ${imageName} image using $smalltalkCIPath"
    cat - > $directoryPath/customClientLoad.st << EOF
      | ci sessionName projectPath |
      [  
      '${latestMetacello}' isEmpty
        ifFalse: [
          Metacello new
            baseline: 'Metacello';
            repository: '${GS_SHARED_REPO_METACELLO}';
            onConflict: [:ex | ex allow];
	    load: #( 'batch' ).
          Metacello new
            baseline: 'Metacello';
            repository: '${GS_SHARED_REPO_METACELLO}';
	    lock. "unconditionally lock Metacello" ].
        Metacello new
          baseline: 'Ston';
          repository: '${GS_SHARED_REPO_STON}';
	  lock. "unconditionally lock Ston"
      '${loadGsDevKitClient}' isEmpty
        ifTrue: [
          "If GsDevKitClient isn't present (GsDevKit_home not updated to latest), load only SmalltalkCI"
          Metacello new
            baseline: 'SmalltalkCI';
            repository: '${GS_SHARED_REPO_SMALLTALKCI}';
            onConflict: [:ex | ex allow];
            load ]
        ifFalse: [
          "If GsDevKitClient is present, lock SmalltalkCI and load GsDevKitClient"
          Metacello new
            baseline: 'SmalltalkCI';
            repository: '${GS_SHARED_REPO_SMALLTALKCI}';
            lock.  "explicitly lock before loading GsDevKitClient"
  	  Metacello new
            baseline: 'TodeClient';
            repository: '${GS_SHARED_REPO_TODE_CLIENT}';
            lock;
            onConflict: [:ex | ex allow];
            load: 'GsDevKitClient' ].
      '${lockMetacelloRepositories}' isEmpty not
        ifTrue: [ (Smalltalk at: #GsDevKit_home) lockClientGsDevKitProjects ] ]
	      on: Warning do: [:w | w resume ].
       projectPath := '$smalltalkCIProjectPath'.
       [ ci := projectPath isEmpty
           ifTrue: [ (Smalltalk at: #SmalltalkCI) load: '${smalltalkCIPath}' ]
	   ifFalse: [ 
	     (Smalltalk at: #SmalltalkCI) 
	       load: '${smalltalkCIPath}'
	       projectDirectory: projectPath ] ]
	         on: MetacelloAllowLockedProjectChange
	         do: [:ex | ex disallow "honor"].
      '${sessionName}' isEmpty
        ifTrue: [ 
          (ci compatibleConfigurationsFor: #gemstoneClient) do: [:configSpec |
            configSpec defaultSessionName ifNotNil: [:sessName |  sessionName := sessName ]]]
	ifFalse: [ sessionName := '${sessionName}' ].
      (Smalltalk at: #SCIGemStoneServerConfigSpec) defaultSessionName: sessionName
EOF
  else
    if [ ! -e "$directoryPath/customClientLoad.st" ] ; then
      exit_0_banner "${imageName} image not updated --- update manually"
    fi
  fi
  $createPharoCmd $directoryPath/clientTmp.image --quit --save $directoryPath/customClientLoad.st
  $pharoCmd $directoryPath/clientTmp.image save $imageName

  echo""
  rm -f $directoryPath/clientTmp.*  $directoryPath/*.zip

  $GS_HOME/bin/private/scanProductsForInstallingGciLibs $gciLibArchArg $directoryPath
fi

exit_0_banner "...finished"
